def my_ls_params (f, x, y):
    """
    Parametros
    name:f type: metodo
    name:x type: list
    name:y type: list
    """
    #Lista de tama√±o f
    matriz = list(range(len(f)))
    
    for i in range(len(f)):
        matriz_beta = list(range(len(x)))
        for j in range(len(x)):
            matriz_beta[j] = f[i](x[j])
        matriz[i] = matriz_beta
        
    #Creando A.T
    transpuesta = (np.array(matriz)).T
    beta = np.linalg.pinv(transpuesta).dot(y)
    return beta

#Data
x1 = np.linspace(0, 2*np.pi, 1000)
y1 = 3*np.sin(x1) - 2*np.cos(x1) + np.random.random(len(x1))
#Square Regression
f = [lambda x: np.sin(x), lambda x: np.cos(x), lambda x: 0*x+1]
beta = my_ls_params(f, x1, y1)
plt.figure(figsize = (15,8))
plt.plot(x1,y1,'r+', label = 'data')
plt.plot(x1, beta[0]*f[0](x1)+beta[1]*f[1](x1)+beta[2], 'k', label='regresion')
plt.xlabel("x")
plt.ylabel("x")
plt.title("Square Regresion")
plt.legend()
plt.show()
